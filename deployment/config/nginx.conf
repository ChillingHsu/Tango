# main 全局设置
# 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。
# user  nobody

# 来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。
# 根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。
worker_processes  1;


daemon off;

# 用来定义全局错误日志文件。
# 日志输出级别有debug、info、notice、warn、error、crit可供选择。
# 其中，debug输出日志最为最详细，而crit输出日志最少。
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 用来指定进程id的存储文件位置。
#pid        logs/nginx.pid;

# nginx工作模式
events {
    # 指定Nginx的工作模式。
    # Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。
    # 其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式。
    # 不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。
    #use epoll

    # 用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。
    # 最大客户端连接数由worker_processes和worker_connections决定。
    # 即Max_clients=worker_processes*worker_connections
    # 进程的最大连接数受Linux系统进程的最大打开文件数限制。
    # 在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效。
    worker_connections  120;
}


http {
    # 用来设定文件的mime类型，类型在配置文件目录下的mime.type文件定义。
    include       mime.types;

    # 设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式。
    # 例如在没有配置asp的locate环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。
    default_type  application/octet-stream;

    # 用于设置日志的格式，和记录哪些参数。
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # 用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。
    #access_log  logs/access.log  main;

    # 于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。
    sendfile        on;
    #tcp_nopush     on;

    # 设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # 负载均衡配置，定义上游服务器

    upstream backends {
        server localhost:8610;
    }

    # 定义虚拟主机
    server {
        # 指定虚拟主机的服务端口
        listen       8600;

        # 用来指定IP地址或者域名，多个域名之间用空格分开
        server_name  "localhost";

        #access_log  logs/host.access.log  main;

        # 定位URL
        # / 匹配访问根目录
        location / {
            # 反向代理（reserve proxy）方式是指用代理服务器来接受 Internet 上的连接请求。
            # 然后将请求转发给内部网络中的上游服务器，并将上游服务器上得到的结果返回给
            # Internet 上请求连接的客户端，此时代理服务器对外的表现就是一个 Web 服务器。

            # 指定需转发的头部字段
            proxy_pass_header Server;
            # 设置头部字段
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;

            # proxy_pass 将请求转发到有处理能力的端上，默认不会转发请求中的 Host 头部。
            proxy_pass http://backends;
            proxy_next_upstream error;
    }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }


    access_log /var/log/nginx/tangoREST_proxy.access_log;
    error_log /var/log/nginx/tangoREST_proxy.error_log;

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # set client body size to 250M #
    client_max_body_size 250M;

}
